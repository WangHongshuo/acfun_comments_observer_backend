package main

import (
	"bytes"
	"fmt"
	"time"
)

// Generated by https://quicktype.io

type CommentsJsonResponse struct {
	Result      int64              `json:"result"`
	CurPage     int64              `json:"curPage"`
	IsUp        bool               `json:"isUp"`
	TotalPage   int64              `json:"totalPage"`
	CommentsMap map[string]Comment `json:"commentsMap"`
	PageSize    int64              `json:"pageSize"`
	TotalCount  int64              `json:"totalCount"`
	CommentIDS  []int64            `json:"commentIds"`
}

type Comment struct {
	Content    string `json:"content"`
	SourceID   int64  `json:"sourceId"`
	IsDelete   bool   `json:"isDelete"`
	Cid        int64  `json:"cid"`
	UserID     int64  `json:"userId"`
	IsUpDelete bool   `json:"isUpDelete"`
	Floor      int64  `json:"floor"`
	QuoteID    int64  `json:"quoteId"`
	UserName   string `json:"userName"`
	IsUp       bool   `json:"isUp"`
	Timestamp  int64  `json:"timestamp"`
}

func (c CommentsJsonResponse) String() string {
	var buff bytes.Buffer
	// CommentIDs是保序的的
	buff.WriteString(fmt.Sprintf("CurPage: %v, TotalPage: %v, PageSize:%v, TotalCount: %v\n",
		c.CurPage, c.TotalPage, c.PageSize, c.TotalCount))
	for _, v := range c.CommentIDS {
		if v, ok := c.CommentsMap[fmt.Sprintf("c%v", v)]; ok {
			buff.WriteString("----------\n")
			buff.WriteString(v.String())
		}
	}
	return buff.String()
}

func (c Comment) String() string {
	var buff bytes.Buffer
	buff.WriteString(fmt.Sprintf("Cid: %v, Floor: %v, UserName: %v, IsUp: %v, Timestamp: %v, SourceID: %v, IsDelete: %v, IsUpDelete: %v\n",
		c.Cid, c.Floor, c.UserName, c.IsUp, time.UnixMilli(c.Timestamp).Format("2006-01-02 15:04:05"), c.SourceID, c.IsDelete, c.IsDelete))
	buff.WriteString(fmt.Sprintf("Content: %v\n", c.Content))
	return buff.String()
}
